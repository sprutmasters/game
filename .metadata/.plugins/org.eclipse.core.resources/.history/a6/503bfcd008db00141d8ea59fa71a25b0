package tilegame.main;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;

import tilegame.display.Display;
import tilegame.gfx.Assets;
import tilegame.gfx.ImageLoader;
import tilegame.gfx.SpriteSheet;
import tilegame.main.states.GameState;

	public class Game implements Runnable{

		public int width, height;
		public String title;
	
		private boolean running = false;
		private Display display;
		private Thread thread;
		private BufferStrategy bs;
		private Graphics g;
		
		//States
		private State gameState;

	
	
	
	public Game(String title, int width, int height){		
		this.width = width;
		this.height = height;
		this.title = title;
		
	}
	
	private void init(){		
		display = new Display(title, width, height);
		Assets.init();
		
		gameState = new GameState();
		
		
	}
	
	private void tick(){
		
	}
	
	private void render(){
		bs = display.getCanvas().getBufferStrategy();
		if(bs == null){
			display.getCanvas().createBufferStrategy(3);
			return;
		}
		g = bs.getDrawGraphics();
		//CLEAR SCREEN
		g.clearRect(0, 0, width, height);
		//DRAW HERE (Tile x, Tile y, 32, 32), x, y
		
		g.drawImage(Assets.dirt, 10, 10, null);
	
	
		
		
		//END DRAWING
		bs.show();
		g.dispose();
		
	}
	
	public void run(){		
		init();
		
		int fps = 144;
		double timePerTick = 1000000000 / fps;
		double delta = 0;
		long now;
		long lastTime = System.nanoTime();
		long timer = 0;
		int ticks = 0;
		
		while(running){
			now = System.nanoTime();
			delta+= (now - lastTime) / timePerTick;
			timer += now - lastTime;
			lastTime = now;
			
			if(delta >= 1){
				tick();
				render();
				ticks++;
				delta --;
			}
			
			if(timer >= 1000000000);
				System.out.println("Ticks and Frames " + ticks);
				ticks = 0;
				timer = 0;
		}
		
		stop();
	}
	
	public synchronized void start(){
		if(running)
			return;
		running = true;
		thread = new Thread(this);
		thread.start();
	}
	
	public synchronized void stop(){
		if(!running)
			return;
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
	}
}
	

