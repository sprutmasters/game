package TileMap;

import java.awt.*;
import java.awt.image.*;
import java.io.*;

import javax.imageio.ImageIO;

import tileGame.GamePanel;


public class TileMap {
	

	//Horizontal and Vertical Coordinates
	private double x;
	private double y;
	
	//Mininmum and Maximum Bounds
	private int xmin;
	private int ymin;
	private int xmax;
	private int ymax;
	
	//private double tween;						//////////////////////////////////////////////////////////
	
	//Map
	private int [] []	map;
	private int tileSize;
	private int numRows;
	private int numCols;
	private int width;
	private int height;
	
	//TILES
	private BufferedImage tileset;
	private int numTilesAcross;
	private Tile[][] tiles;
	
	//DRAWING
	private int rowOffset;
	private int colOffset;
	private int numRowsToDraw;
	private int numColsToDraw;
	
	//SIZE OF TILES
	public TileMap(int tileSize) {
		this.tileSize = tileSize;
		numRowsToDraw = GamePanel.HEIGHT / tileSize + 2;
		numColsToDraw = GamePanel.WIDTH / tileSize + 2;
		
		//tween = 0.07;							///////////////////////////////////////////////////////////////
	}
	public int getNumRows() { 
		return numRows; }

	public int getNumCols() {
		return numCols; }
	
	public void loadTiles(String s) {
		
		try {
			
			tileset = ImageIO.read(getClass().getResourceAsStream(s));		
			numTilesAcross = tileset.getWidth() / tileSize;
			tiles = new Tile[2] [numTilesAcross];
			
			BufferedImage subimage;
			for(int col = 0; col < numTilesAcross; col++) {
				subimage = tileset.getSubimage(col * tileSize, 0, tileSize, tileSize);
			
			tiles[0] [col] = new Tile(subimage, Tile.NORMAL);
			subimage=tileset.getSubimage(col * tileSize, tileSize, tileSize, tileSize);
			
			tiles[1][col] = new Tile(subimage, Tile.BLOCKED);
			
		}
		
	}
	
	catch(Exception e) {
		e.printStackTrace();}
		}
	
		public void loadMap(String s){
		
		try{
			
			InputStream in = getClass().getResourceAsStream(s);
			BufferedReader br = new BufferedReader( new InputStreamReader(in));
			
			numCols = Integer.parseInt(br.readLine());
			numRows = Integer.parseInt(br.readLine());
			map = new int[numRows][numCols];
			width = numCols * tileSize;
			height = numRows * tileSize;
			
			String delims = "\\s+";
		for(int row = 0; row < numRows; row++)	{
				
				String line = br.readLine();
				String[] tokens = line.split(delims);
				
		for(int col = 0; col < numCols; col++) 	
		{
				map[row][col] = Integer.parseInt(tokens[col]);
				}
			}
		
		
	}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		
	}
		
		public int getTileSize(){return tileSize;}
		public int getx()		{return (int)x;}
		public int gety() 		{return (int)y;}
		public int getWidth()	{return	(int)width;}
		public int getHeight()	{return	(int)height;}
		
		
		//SETS THE STARTING POINT IN TILES1.PNG IN TOP LEFT CORNER AND KEEPS GOING TO THE RIGHT... KINDA
		public int getType(int row, int col){
			int rc = map [row][col];
			int r = rc / numTilesAcross;
			int c = rc % numTilesAcross;
			return tiles[r][c].getType();
		}
				
		public void setPosition(double x, double y){
			
			
			//TWEEN POSITION TRACKING										///////////////////////////////////////////////////////////////////
			//this.x += (x - this.x) * tween;
			//this.y += (y - this.x) * tween;
			
			fixBounds();
		}
		
		private void fixBounds(){
			if(x < xmin) x = xmin;
			if(y <xmin) x = ymin;
			if(x > xmin) x = xmin;
			if(y > xmin) x = ymin;
			
		}
}

	




